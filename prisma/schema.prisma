// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminUserId String @unique
  adminUser   User   @relation(name: "AdminOfOrganization", fields: [adminUserId], references: [id])

  users             User[]              @relation(name: "UsersOfOrganization")
  projects          Project[]           @relation(name: "ProjectsOfOrganization")
  products          Product[]           @relation(name: "ProductsOfOrganization")
  vendors           Vendor[]            @relation(name: "VendorsOfOrganization")
  purchaseOrders    PurchaseOrders[]    @relation(name: "PurchaseOrdersOfOrganization")
  productsInProject ProductsInProject[] @relation(name: "ProductsInProjectOfOrganization")
}

enum Role {
  ADMIN
  USER
  ORG_ADMIN
}

model User {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  email          String?   @unique
  emailVerified  DateTime?
  name           String?
  hashedPassword String?
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)

  organizationId String?
  organization   Organization? @relation(name: "UsersOfOrganization", fields: [organizationId], references: [id])

  // Fields related to the User model's relations
  productsInProject   ProductsInProject[]
  managedOrganization Organization?       @relation(name: "AdminOfOrganization")

  Product Product[]
  Project Project[]
}

model Product {
  id                 String  @id @default(uuid())
  userId             String
  productBrand       String?
  productName        String  @unique
  productDescription String
  productPrice       Float   @db.DoublePrecision
  productCategory    String?
  location           String?
  totalQty           Int

  organizationId          String?
  organization            Organization?             @relation(name: "ProductsOfOrganization", fields: [organizationId], references: [id])
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsInProject       ProductsInProject[]       @relation(name: "ProductProjects")
  productsInPurchaseOrder ProductsInPurchaseOrder[]
}

model Project {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  userId             String
  projectName        String
  projectDescription String

  organizationId    String?
  organization      Organization?       @relation(name: "ProjectsOfOrganization", fields: [organizationId], references: [id])
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  productsInProject ProductsInProject[] @relation(name: "ProjectProducts")
}

model ProductsInProject {
  id        String @id @default(uuid())
  userId    String
  projectId String
  productId String
  quantity  Int

  project        Project       @relation(name: "ProjectProducts", fields: [projectId], references: [id])
  product        Product       @relation(name: "ProductProjects", fields: [productId], references: [id])
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(name: "ProductsInProjectOfOrganization", fields: [organizationId], references: [id])

  @@unique([projectId, productId])
}

model ProductsInPurchaseOrder {
  id              String  @id @default(uuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  received        Boolean @default(false)

  purchaseOrder PurchaseOrders @relation(fields: [purchaseOrderId], references: [id])
  product       Product        @relation(fields: [productId], references: [id])

  @@unique([purchaseOrderId, productId])
}

enum OrderStatus {
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELLED
}

model PurchaseOrders {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  totalCost   Float       @db.DoublePrecision
  orderStatus OrderStatus

  organizationId  String
  organization    Organization              @relation(name: "PurchaseOrdersOfOrganization", fields: [organizationId], references: [id])
  productsInOrder ProductsInPurchaseOrder[]
}

model Vendor {
  id            String  @id @default(uuid())
  vendorName    String
  vendorAddress String?

  organizationId String?
  organization   Organization? @relation(name: "VendorsOfOrganization", fields: [organizationId], references: [id])
}
